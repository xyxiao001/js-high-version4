{"version":3,"sources":["mobx/common.ts","Home/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["timeDate","observable","startTime","beginTimeStr","setInterval","moment","now","dur","duration","diff","timeStr","days","hours","minutes","seconds","Home","observer","props","state","prizeList","title","des","className","src","alt","process","href","target","rel","this","map","item","key","React","Component","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mUAEaA,EAAWC,YAAW,CACjCC,UAAW,sBACXC,aAAc,KAGhBC,aAAY,WACV,IAAMF,EAAYG,IAAOL,EAASE,WAC5BI,EAAMD,MACNE,EAAMF,IAAOG,SAASN,EAAUO,KAAKH,IACrCI,EAAO,UAAMH,EAAII,OAAV,kBAAqBJ,EAAIK,QAAzB,kBAAsCL,EAAIM,UAA1C,mBAA0DN,EAAIO,UAA9D,WACbd,EAASG,aAAeO,IACvB,K,IC8GYK,EA5GdC,Y,oDAEC,WAAYC,GAAe,IAAD,8BACxB,cAAMA,IACDC,MAAQ,CACXC,UAAW,CACT,CACEC,MAAO,qBACPC,IAAK,iEANa,E,qDAaxB,OACE,6BAASC,UAAU,gBACjB,6BAASA,UAAU,eAEjB,6BAASA,UAAU,kBACjB,yBAAKC,IAAI,iDAAiDD,UAAU,OAAOE,IAAI,SAC/E,6BAASF,UAAU,mBACjB,yBAAKC,IAAI,qGAAqGC,IAAI,QAAQF,UAAU,YACpI,yBAAKC,IAAI,qGAAqGC,IAAI,QAAQF,UAAU,YACpI,yBAAKC,IAAI,qGAAqGC,IAAI,QAAQF,UAAU,aAEtI,6BAASA,UAAU,mCACjB,yBAAKC,IAAI,qGAAqGC,IAAI,QAAQF,UAAU,YACpI,yBAAKC,IAAI,qGAAqGC,IAAI,QAAQF,UAAU,YACpI,yBAAKC,IAAI,qGAAqGC,IAAI,QAAQF,UAAU,aAGtI,6BAASA,UAAU,cACjB,uBAAGA,UAAU,SACX,8BACE,yBAAKC,IAAKE,0CAAqCD,IAAI,MAErD,yFAEA,uBAAGF,UAAU,QAAStB,EAASE,cAKvC,6BAASoB,UAAU,gBACjB,uBAAGA,UAAU,mBACX,0BAAMA,UAAU,cAAhB,oDACA,0BAAMA,UAAU,QAAStB,EAASG,eAGpC,6BAASmB,UAAU,eAEjB,6BAASA,UAAU,cACjB,uBAAGI,KAAK,yEAAyEC,OAAO,SAASC,IAAI,uBAArG,4BACA,uBAAGF,KAAK,0CAA0CC,OAAO,SAASC,IAAI,uBAAtE,6BAGF,6BAASN,UAAU,cAChB,uBAAGA,UAAU,aACX,uBAAGA,UAAU,aACb,0DACA,uBAAGA,UAAU,cAGbO,KAAKX,MAAMC,UAAUW,KAAI,SAAAC,GAAI,OAC3B,uBAAGT,UAAU,aAAaU,IAAKD,EAAKX,OAClC,8BACGW,EAAKX,OAER,8BACGW,EAAKV,UAOjB,6BAASC,UAAU,aACf,uBAAGA,UAAU,aACZ,uBAAGA,UAAU,aACb,0DACA,uBAAGA,UAAU,cAEf,uBAAGA,UAAU,aAAb,yGAGA,uBAAGA,UAAU,aAAb,+QAGA,uBAAGA,UAAU,aAAb,0SAGA,uBAAGA,UAAU,aAAb,iPAGA,uBAAGA,UAAU,aAAb,+O,GA9FIW,IAAMC,a,ECMVC,MAdf,WACE,OACE,6BAASb,UAAU,WACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOc,KAAK,KACV,kBAAC,EAAD,WCFQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.137ce777.chunk.js","sourcesContent":["import { observable } from 'mobx';\nimport moment from 'moment'\nexport const timeDate = observable({\n  startTime: '2020-09-17 16:00:00',\n  beginTimeStr: ''\n})\n\nsetInterval(() => {\n  const startTime = moment(timeDate.startTime)\n  const now = moment()\n  const dur = moment.duration(startTime.diff(now))\n  const timeStr = `${dur.days()}天 ${dur.hours()}时 ${ dur.minutes()} 分 ${ dur.seconds() } 秒`\n  timeDate.beginTimeStr = timeStr\n}, 1000)","import React from 'react';\nimport './index.scss'\nimport { observer } from \"mobx-react\"\nimport { timeDate } from '../mobx/common'\n\nexport interface Props{\n}\nexport interface State{\n  prizeList: prizeItem[];\n}\n\nexport interface prizeItem {\n  title: string,\n  des: string\n}\n@observer\nclass Home extends React.Component<Props, State, {}> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      prizeList: [\n        {\n          title: '第一名',\n          des: '获胜者得 200 左右的奖品'\n        }\n      ]\n    };\n  }\n  \n  render() {\n    return (\n      <section className=\"we-code-home\">\n        <section className=\"home-header\">\n\n          <section className=\"logo-container\">\n            <img src=\"http://hp.guahao-inc.com/_nuxt/img/7a19e60.png\" className=\"logo\" alt=\"logo\"/>\n            <section className=\"logo2-container\">\n              <img src=\"https://static.leetcode-cn.com/cn-mono-assets/production/main/assets/animation-square.5bc7b589.png\" alt=\"logo2\" className=\"logo2-1\"/>\n              <img src=\"https://static.leetcode-cn.com/cn-mono-assets/production/main/assets/animation-square.5bc7b589.png\" alt=\"logo2\" className=\"logo2-2\" />\n              <img src=\"https://static.leetcode-cn.com/cn-mono-assets/production/main/assets/animation-square.5bc7b589.png\" alt=\"logo2\" className=\"logo2-3\" />\n            </section>\n            <section className=\"logo2-container logo3-container\">\n              <img src=\"https://static.leetcode-cn.com/cn-mono-assets/production/main/assets/animation-square.5bc7b589.png\" alt=\"logo2\" className=\"logo2-1\"/>\n              <img src=\"https://static.leetcode-cn.com/cn-mono-assets/production/main/assets/animation-square.5bc7b589.png\" alt=\"logo2\" className=\"logo2-2\" />\n              <img src=\"https://static.leetcode-cn.com/cn-mono-assets/production/main/assets/animation-square.5bc7b589.png\" alt=\"logo2\" className=\"logo2-3\" />\n            </section>\n\n            <section className=\"home-title\">\n              <p className=\"title\">\n                <span>\n                  <img src={process.env.PUBLIC_URL + '/bei.png'} alt=\"\"/>\n                </span>\n                <span>医院支撑组编程大赛</span>\n              </p>\n                <p className=\"date\">{ timeDate.startTime }</p>\n            </section>\n          </section>\n        </section>\n\n        <section className=\"home-content\">\n          <p className=\"begin-container\">\n            <span className=\"begin-time\">距离比赛开始还剩</span>\n            <span className=\"time\">{ timeDate.beginTimeStr }</span>\n          </p>\n\n          <section className=\"content-box\">\n\n            <section className=\"box-header\">\n              <a href=\"http://confluence.guahao-inc.com/pages/viewpage.action?pageId=53830542\" target=\"_blank\" rel=\"noopener noreferrer\">每周一题</a>\n              <a href=\"http://box.hp.guahao-inc.com/typescript\" target=\"_blank\" rel=\"noopener noreferrer\">练一练手</a>\n            </section>\n\n            <section className=\"prize-list\">\n               <p className=\"tips-line\">\n                 <i className=\"box-icon\"></i>\n                 <span>奖品设置</span>\n                 <i className=\"box-icon\"></i>\n               </p>\n               {\n                 this.state.prizeList.map(item => (\n                   <p className=\"prize-item\" key={item.title}>\n                     <span>\n                      { item.title }\n                     </span>\n                     <span>\n                      { item.des }\n                     </span>\n                   </p>\n                 ))\n               }\n            </section>\n\n            <section className=\"rule-list\">\n                <p className=\"tips-line\">\n                 <i className=\"box-icon\"></i>\n                 <span>比赛规则</span>\n                 <i className=\"box-icon\"></i>\n               </p>\n               <p className=\"rule-item\">\n                 1. 算法比赛共计 5 题，比赛时长 120 分钟。\n               </p>\n               <p className=\"rule-item\">\n                 2. 题目依据难易度有不同分值，得分越高排名越高；在得分相同的情况下，答题用时越少则排名越高。\n               </p>\n               <p className=\"rule-item\">\n                 3. 比赛中每提交一次错误解答，解答用时将增加 5 分钟，请谨慎提交解答，避免过多错误提交导致完赛用时过长。\n               </p>\n               <p className=\"rule-item\">\n                 4. 为了防止作弊行为，在提交错误解答后，会告知该错误的类型，不会告知具体的错误用例\n               </p>\n               <p className=\"rule-item\">\n                 5. 题目分值为(困难: 50分， 中等： 25分,  简单： 15 分)，一共为困难1 题， 中等 2 题，简单 2 题。\n               </p>\n            </section>\n\n          </section>\n        </section>\n\n      </section>\n    )\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Home from './Home';\n\nfunction App() {\n  return (\n    <section className=\"we-code\">\n      <Router>\n        <Switch>\n          <Route path=\"/\" >\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}